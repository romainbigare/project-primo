{
  "version": 3,
  "sources": ["../../src/chart/style/ChartStyle.js", "../../src/chart/BaseChart.vue", "../../src/chart/Chart.vue", "../../src/chart/Chart.vue"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst inlineStyles = {\n    root: { position: 'relative' }\n};\n\nconst classes = {\n    root: 'p-chart'\n};\n\nexport default BaseStyle.extend({\n    name: 'chart',\n    classes,\n    inlineStyles\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport ChartStyle from 'primevue/chart/style';\n\nexport default {\n    name: 'BaseChart',\n    extends: BaseComponent,\n    props: {\n        type: String,\n        data: null,\n        options: null,\n        plugins: null,\n        width: {\n            type: Number,\n            default: 300\n        },\n        height: {\n            type: Number,\n            default: 150\n        },\n        canvasProps: {\n            type: null,\n            default: null\n        }\n    },\n    style: ChartStyle,\n    provide() {\n        return {\n            $pcChart: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" v-bind=\"ptmi('root')\">\n        <canvas ref=\"canvas\" :width=\"width\" :height=\"height\" @click=\"onCanvasClick($event)\" v-bind=\"{ ...canvasProps, ...ptm('canvas') }\"></canvas>\n    </div>\n</template>\n\n<script>\nimport BaseChart from './BaseChart.vue';\n\nexport default {\n    name: 'Chart',\n    extends: BaseChart,\n    inheritAttrs: false,\n    emits: ['select', 'loaded'],\n    chart: null,\n    watch: {\n        /*\n         * Use deep watch to enable triggering watch for changes within structure\n         * otherwise the entire data object needs to be replaced to trigger watch\n         */\n        data: {\n            handler() {\n                this.reinit();\n            },\n            deep: true\n        },\n        type() {\n            this.reinit();\n        },\n        options() {\n            this.reinit();\n        }\n    },\n    mounted() {\n        this.initChart();\n    },\n    beforeUnmount() {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = null;\n        }\n    },\n    methods: {\n        initChart() {\n            import('chart.js/auto').then((module) => {\n                if (this.chart) {\n                    this.chart.destroy();\n                    this.chart = null;\n                }\n\n                if (module && module.default) {\n                    this.chart = new module.default(this.$refs.canvas, {\n                        type: this.type,\n                        data: this.data,\n                        options: this.options,\n                        plugins: this.plugins\n                    });\n                }\n\n                this.$emit('loaded', this.chart);\n            });\n        },\n        getCanvas() {\n            return this.$canvas;\n        },\n        getChart() {\n            return this.chart;\n        },\n        getBase64Image() {\n            return this.chart.toBase64Image();\n        },\n        refresh() {\n            if (this.chart) {\n                this.chart.update();\n            }\n        },\n        reinit() {\n            this.initChart();\n        },\n        onCanvasClick(event) {\n            if (this.chart) {\n                const element = this.chart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, false);\n                const dataset = this.chart.getElementsAtEventForMode(event, 'dataset', { intersect: true }, false);\n\n                if (element && element[0] && dataset) {\n                    this.$emit('select', { originalEvent: event, element: element[0], dataset: dataset });\n                }\n            }\n        },\n        generateLegend() {\n            if (this.chart) {\n                return this.chart.generateLegend();\n            }\n        }\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" v-bind=\"ptmi('root')\">\n        <canvas ref=\"canvas\" :width=\"width\" :height=\"height\" @click=\"onCanvasClick($event)\" v-bind=\"{ ...canvasProps, ...ptm('canvas') }\"></canvas>\n    </div>\n</template>\n\n<script>\nimport BaseChart from './BaseChart.vue';\n\nexport default {\n    name: 'Chart',\n    extends: BaseChart,\n    inheritAttrs: false,\n    emits: ['select', 'loaded'],\n    chart: null,\n    watch: {\n        /*\n         * Use deep watch to enable triggering watch for changes within structure\n         * otherwise the entire data object needs to be replaced to trigger watch\n         */\n        data: {\n            handler() {\n                this.reinit();\n            },\n            deep: true\n        },\n        type() {\n            this.reinit();\n        },\n        options() {\n            this.reinit();\n        }\n    },\n    mounted() {\n        this.initChart();\n    },\n    beforeUnmount() {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = null;\n        }\n    },\n    methods: {\n        initChart() {\n            import('chart.js/auto').then((module) => {\n                if (this.chart) {\n                    this.chart.destroy();\n                    this.chart = null;\n                }\n\n                if (module && module.default) {\n                    this.chart = new module.default(this.$refs.canvas, {\n                        type: this.type,\n                        data: this.data,\n                        options: this.options,\n                        plugins: this.plugins\n                    });\n                }\n\n                this.$emit('loaded', this.chart);\n            });\n        },\n        getCanvas() {\n            return this.$canvas;\n        },\n        getChart() {\n            return this.chart;\n        },\n        getBase64Image() {\n            return this.chart.toBase64Image();\n        },\n        refresh() {\n            if (this.chart) {\n                this.chart.update();\n            }\n        },\n        reinit() {\n            this.initChart();\n        },\n        onCanvasClick(event) {\n            if (this.chart) {\n                const element = this.chart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, false);\n                const dataset = this.chart.getElementsAtEventForMode(event, 'dataset', { intersect: true }, false);\n\n                if (element && element[0] && dataset) {\n                    this.$emit('select', { originalEvent: event, element: element[0], dataset: dataset });\n                }\n            }\n        },\n        generateLegend() {\n            if (this.chart) {\n                return this.chart.generateLegend();\n            }\n        }\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["inlineStyles", "root", "position", "classes", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "type", "String", "data", "options", "plugins", "width", "Number", "height", "canvasProps", "style", "ChartStyle", "provide", "$pcChart", "$parentInstance", "script", "BaseChart", "inheritAttrs", "emits", "chart", "watch", "handler", "reinit", "deep", "mounted", "initChart", "beforeUnmount", "destroy", "methods", "_this", "then", "module", "$refs", "canvas", "$emit", "getCanvas", "$canvas", "getChart", "getBase64Image", "toBase64Image", "refresh", "update", "onCanvasClick", "event", "element", "getElementsAtEventForMode", "intersect", "dataset", "originalEvent", "generateLegend", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "sx", "ptmi", "_createElementVNode", "ref", "onClick", "_cache", "$event", "$options", "_objectSpread", "ptm", "_hoisted_1"]
}
